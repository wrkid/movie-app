{"ast":null,"code":"export default class ApiService {\n  constructor() {\n    this._apiBase = `https://api.themoviedb.org/3/search/movie?query=`;\n    this._options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNTZmMTZkYTdhYzUwNmY2NWEzYTIxZmYyZTY3MWMzMCIsInN1YiI6IjY1MjgwNmUzMWYzZTYwMDBmZjg0N2JkZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eCyuatovTMylls3DwByDpOX5YNu5nQhE6wZmhggwJIs'\n      }\n    };\n  }\n  async getResource(url) {\n    const res = await fetch(url, this._options);\n    if (!res.ok) {\n      throw new Error(`Couldn't fetch ${url}, recieved: ${res.status}`);\n    }\n    return res.json();\n  }\n  async getMovie(url) {\n    const result = await fetch(url, this._options);\n    if (!res.ok) {\n      throw new Error(`Couldn't fetch ${url}, recieved: ${res.status}`);\n    }\n    return result.json();\n  }\n  async getAllMovies(movieName = '#', page = 1) {\n    const result = await this.getResource(`${this._apiBase}${movieName}&page=${page}`).then(res => res);\n    return result;\n  }\n  async getMovieById(id) {\n    const result = await this.getMovie(!URL);\n    return result;\n  }\n}","map":{"version":3,"names":["ApiService","constructor","_apiBase","_options","method","headers","accept","Authorization","getResource","url","res","fetch","ok","Error","status","json","getMovie","result","getAllMovies","movieName","page","then","getMovieById","id","URL"],"sources":["/Users/w.k/Documents/git/movie-app/src/components/ApiService/api-service.jsx"],"sourcesContent":["export default class ApiService {\n  _apiBase = `https://api.themoviedb.org/3/search/movie?query=`;\n\n  _options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNTZmMTZkYTdhYzUwNmY2NWEzYTIxZmYyZTY3MWMzMCIsInN1YiI6IjY1MjgwNmUzMWYzZTYwMDBmZjg0N2JkZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eCyuatovTMylls3DwByDpOX5YNu5nQhE6wZmhggwJIs',\n    },\n  };\n\n  async getResource(url) {\n    const res = await fetch(url, this._options);\n\n    if (!res.ok) {\n      throw new Error(`Couldn't fetch ${url}, recieved: ${res.status}`);\n    }\n\n    return res.json();\n  }\n\n  async getMovie(url) {\n    const result = await fetch(url, this._options);\n\n    if (!res.ok) {\n      throw new Error(`Couldn't fetch ${url}, recieved: ${res.status}`);\n    }\n\n    return result.json();\n  }\n\n  async getAllMovies(movieName = '#', page = 1) {\n    const result = await this.getResource(`${this._apiBase}${movieName}&page=${page}`).then(\n      (res) => res,\n    );\n    return result;\n  }\n\n  async getMovieById(id) {\n    const result = await this.getMovie(!URL)\n\n    return result;\n  }\n}\n"],"mappings":"AAAA,eAAe,MAAMA,UAAU,CAAC;EAAAC,YAAA;IAAA,KAC9BC,QAAQ,GAAI,kDAAiD;IAAA,KAE7DC,QAAQ,GAAG;MACTC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EACX;MACJ;IACF,CAAC;EAAA;EAED,MAAMC,WAAWA,CAACC,GAAG,EAAE;IACrB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE,IAAI,CAACN,QAAQ,CAAC;IAE3C,IAAI,CAACO,GAAG,CAACE,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAE,kBAAiBJ,GAAI,eAAcC,GAAG,CAACI,MAAO,EAAC,CAAC;IACnE;IAEA,OAAOJ,GAAG,CAACK,IAAI,CAAC,CAAC;EACnB;EAEA,MAAMC,QAAQA,CAACP,GAAG,EAAE;IAClB,MAAMQ,MAAM,GAAG,MAAMN,KAAK,CAACF,GAAG,EAAE,IAAI,CAACN,QAAQ,CAAC;IAE9C,IAAI,CAACO,GAAG,CAACE,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAE,kBAAiBJ,GAAI,eAAcC,GAAG,CAACI,MAAO,EAAC,CAAC;IACnE;IAEA,OAAOG,MAAM,CAACF,IAAI,CAAC,CAAC;EACtB;EAEA,MAAMG,YAAYA,CAACC,SAAS,GAAG,GAAG,EAAEC,IAAI,GAAG,CAAC,EAAE;IAC5C,MAAMH,MAAM,GAAG,MAAM,IAAI,CAACT,WAAW,CAAE,GAAE,IAAI,CAACN,QAAS,GAAEiB,SAAU,SAAQC,IAAK,EAAC,CAAC,CAACC,IAAI,CACpFX,GAAG,IAAKA,GACX,CAAC;IACD,OAAOO,MAAM;EACf;EAEA,MAAMK,YAAYA,CAACC,EAAE,EAAE;IACrB,MAAMN,MAAM,GAAG,MAAM,IAAI,CAACD,QAAQ,CAAC,CAACQ,GAAG,CAAC;IAExC,OAAOP,MAAM;EACf;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}